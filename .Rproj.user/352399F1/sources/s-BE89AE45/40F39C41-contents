################################################################################
#' Export data for nodes/reaches for one SOBEK Case
#'
#' For all .HIS files subfolders.
#' @param case.list.file Path to the file containing SOBEK Cases to work with\cr
#' @param qID Path to file containing list of reach IDs for struct.his\cr
#' @param wID Path to file containing list of node IDs for calcpnt.his\cr
#' @param lID Path to file containing list of node IDs for lateral.his\cr
#' @param sID Path to file containing list of node IDs for struct.his\cr
#' @param mID Path to file containing list of node IDs for measstat.his\cr
#' IDs list shoulde have the first column with IDs(col.name = "sobek_id")\cr
#' Second column (col.name = "name") is for Names correspond to the IDs
#' @param f.sep Seperator of the node.list.file, default = '\\t'
#' @param f.header Logical. Has node.list.file header?
#' @param f.comment Comment character of the node.list.file, default = "#"
#' @param param Index of the Paramter to get the data, default = 1
#' @param verbose Should message be displayed?
#' @return A list of data.table
#' @export
his_single_case <- function(
  case.name = NULL, # Name of the Sobek case
  sobek.project = NULL, # path to Sobek Project folder
  qID = NULL, # path to list of sobek_ids for Discharge
  wID = NULL, # path to list of sobek_ids for Water level
  lID = NULL, # path to list of sobek_ids for Lateral
  sID = NULL, # path to list of sobek_ids for Structure
  mID = NULL, # path to list of sobek_ids for Measstation
  f.sep = "\t", # seperation of node list
  f.comment = "#", # node list comment character
  f.header = FALSE,
  param = 1, # index of the paramter to get data from .HIS file
  # out.folder = ".",
  verbose = FALSE) {
  if (is.null(case.name) || class(as.character(case.name)) != "character"){
    stop("case.name must be given and coercible to charaters")
  }
  case.name <- as.character(case.name)
  # if (!dir.exists(out.folder)) {
  # 	dir.create(out.folder, recursive = FALSE, showWarnings = FALSE)
  # }
  # setwd(out.folder)
  # check SOBEK project
  sobek_cmt <- paste(sobek.project, "caselist.cmt", sep = "/")
  if (!file.exists(sobek_cmt)) {
    stop("Sobek Caselist.cmt does not exist!")
  }
  clist <- list(case_name = case.name)
  # reading SOBEK caselist.cmt
  sobek_clist <- utils::read.table(
    file = sobek_cmt,
    header = FALSE,
    sep = " ",
    quote = "'",
    stringsAsFactors = FALSE,
    blank.lines.skip = TRUE,
    col.names = c("case_number", "case_name")
  )
  clist$case_number <- lapply(clist$case_name,
                              FUN = .get_case_number, case.list = sobek_clist
  )


  clist$case_sobek_folder <- lapply(clist$case_number,
                                    FUN = function(x, pth = sobek.project) {
                                      paste(pth, x, sep = "/")
                                    }
  )

  # extracting data
  wID_res <- list()
  qID_res <- list()
  lID_res <- list()
  sID_res <- list()
  mID_res <- list()
  result  <- list()

  j <- 1
  for (i in clist$case_number) {
    if (verbose) {
      print(paste(
        "Working with Case:",
        clist$case_name[clist$case_number == i]
      ))
    }

    if (!is.na(i)) {
      his_folder <- clist$case_sobek_folder[clist$case_number == i]
      # get data for Water level
      if (!is.null(wID)) {
        # The function his_from_file checks if the file exists
        if(class(wID) == "character"){
          tmp <- his_from_file(
            his.file = paste(his_folder, "calcpnt.his", sep = "/"),
            node.list.file = wID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          wID_res[[j]] <- tmp
        }

        if (class(wID) == "list"){
          tmp <- his_from_list(
            his.file = paste(his_folder, "calcpnt.his", sep = "/"),
            node.list = wID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          wID_res[[j]] <- tmp
        }
      }

      # get data for Discharge
      if (!is.null(qID)) {
        if(class(qID) == "character"){
          tmp <- his_from_file(
            his.file = paste(his_folder, "reachseg.his", sep = "/"),
            node.list.file = qID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          qID_res[[j]] <- tmp
        }

        if (class(qID) == "list"){
          tmp <- his_from_list(
            his.file = paste(his_folder, "reachseg.his", sep = "/"),
            node.list = qID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          qID_res[[j]] <- tmp
        }
      }

      # get data for Laterals
      if (!is.null(lID)) {
        if(class(lID) == "character"){
          tmp <- his_from_file(
            his.file = paste(his_folder,"lateral.his", sep = "/"),
            node.list.file = lID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          lID_res[[j]] <- tmp
        }

        if (class(lID) == "list"){
          tmp <- his_from_list(
            his.file = paste(his_folder, "lateral.his", sep = "/"),
            node.list = lID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          lID_res[[j]] <- tmp
        }
      }

      # get data for Structure
      if (!is.null(sID)) {
        if (class(sID) == "character"){
          tmp <- his_from_file(
            his.file = paste(his_folder, "struc.his", sep = "/"),
            node.list.file = sID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          sID_res[[j]] <- tmp
        }

        if (class(sID) == "list"){
          tmp <- his_from_list(
            his.file = paste(his_folder, "struc.his", sep = "/"),
            node.list = sID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          sID_res[[j]] <- tmp
        }
      }

      # get data for Measstation
      if (!is.null(mID)) {
        if (class(mID) == "character"){
          tmp <- his_from_file(
            his.file = paste(his_folder, "measstat.his", sep = "/"),
            node.list.file = mID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          mID_res[[j]] <- tmp
        }

        if (class(mID) == "list"){
          tmp <- his_from_list(
            his.file = paste(his_folder, "measstat.his", sep = "/"),
            node.list = mID,
            param = param
          )
          tmp$case <- clist$case_name[clist$case_number == i]
          mID_res[[j]] <- tmp
        }
      }
      j <- j + 1
    } # end of if (i != 99999)
  } # end of for

  rm(tmp)

  if (length(wID_res) > 0) {
    result$waterlevel <- data.table::rbindlist(wID_res)
    # colnames(result$waterlevel) <-
    rm(wID_res)
  }
  if (length(qID_res) > 0) {
    result$discharge <- data.table::rbindlist(qID_res)
    rm(qID_res)
  }
  if (length(lID_res) > 0) {
    result$lateral <- data.table::rbindlist(lID_res)
    rm(lID_res)
  }
  if (length(sID_res) > 0) {
    result$structure <- data.table::rbindlist(sID_res)
    rm(sID_res)
  }
  if (length(mID_res) > 0) {
    result$measstation <- data.table::rbindlist(mID_res)
    rm(mID_res)
  }

  return(result)
}
