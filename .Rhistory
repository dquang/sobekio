2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric', n = (param_nr * total_loc + 1)*total_tstep, size = 4)
dim(hvector) <- c(total_tstep, 1 + param_nr * total_loc)
locs_mask <- sapply(locs, function(x) {1 + param + param_nr * (x - 1)})
locs_mask <- c(1, locs_mask)
close(con)
return(hvector[, locs_mask])
}
system.time(tmp <- .his_from_loc(his.file, locs[1:5], 1))
View(tmp)
devtools::load_all(".")
system.time(hdf2 <- .his_df2(his.file, 1))
dim(hisdf2)
dim(hdf2)
dim(hdf1)
View(hisdf2[,1:2])
View(hdf2[,1:2])
View(hdf1[,1:2])
View(hdf1[,1:3])
system.time(hdf1 <- .his_df(his.file, 1))
system.time(hdf2 <- .his_df2(his.file, 1))
.his_df2 <- function(his.file, work_param){
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# con <- file(his.file, open = "rb", encoding = "native.enc")
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric',
n = total_tstep * (param_nr * total_loc + 1),
size = 4)
dim(hvector) <- c(total_tstep, 1 + param_nr * total_loc)
his_mask <- seq.int(
from = work_param,
to = param_nr * total_loc,
by = param_nr
)
his_mask <- c(1, his_mask)
return(hvector[, his_mask])
}
.his_df2 <- function(his.file, work_param){
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# con <- file(his.file, open = "rb", encoding = "native.enc")
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric',
n = total_tstep * (param_nr * total_loc + 1),
size = 4)
dim(hvector) <- c(total_tstep, 1 + param_nr * total_loc)
his_mask <- seq.int(
from = work_param + 1,
to = param_nr * total_loc + 1,
by = param_nr
)
# his_mask <- c(1, his_mask)
return(hvector[, his_mask])
}
system.time(hdf2 <- .his_df2(his.file, 1))
View(hdf2[,1:2])
.his_df2 <- function(his.file, work_param){
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# con <- file(his.file, open = "rb", encoding = "native.enc")
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric',
n = total_tstep * (param_nr * total_loc + 1),
size = 4)
dim(hvector) <- c(total_tstep, 1 + param_nr * total_loc)
his_mask <- seq.int(
from = work_param + 1,
to = param_nr * total_loc + 1,
by = param_nr
)
# his_mask <- c(1, his_mask)
return(hvector)
}
system.time(hdf2 <- .his_df2(his.file, 1))
View(hdf1[,1:2])
View(hdf2[,1:2])
dim(hdf2)
.his_df2 <- function(his.file, work_param){
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# con <- file(his.file, open = "rb", encoding = "native.enc")
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric',
n = total_tstep * (param_nr * total_loc + 1))
dim(hvector) <- c(total_tstep, 1 + param_nr * total_loc)
his_mask <- seq.int(
from = work_param + 1,
to = param_nr * total_loc + 1,
by = param_nr
)
# his_mask <- c(1, his_mask)
return(hvector)
}
system.time(hdf2 <- .his_df2(his.file, 1))
ndim(hdf1)
dim(hdf1)
his.file
con <- file(his.file, open = "rb", encoding = "native.enc")
param_nr = 2
total_loc = 3007
total_tstep = 672
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric', n = (param_nr * total_loc + 1)*total_tstep, size = 4)
dim(hvector) <- c(672,6015)
hvector[1,1]
hvector[1,2]
hvector[1,3]
hdf1[1,2]
View(hvector[,1])
hvector <- readBin(con, 'numeric', n = (param_nr * total_loc)*total_tstep, size = 4)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
hvector <- readBin(con, 'numeric', n = (param_nr * total_loc)*total_tstep, size = 4)
dim(hvector) <- c(672,6015)
dim(hvector) <- c(672,6014)
View(hvector[,1])
install.packages("ConfigParser")
library(ConfigParser)
setting <- ConfigParser::ConfigParser()
setting <- new ConfigParser()
setting <- ConfigParser()
setting <- ConfigParser::ConfigParser
setting.read('c:/so21503/vgtb.lit/3/calcpnt.hia')
read(setting,'c:/so21503/vgtb.lit/3/calcpnt.hia')
ConfigParse::read('c:/so21503/vgtb.lit/3/calcpnt.hia')
ConfigParser::read('c:/so21503/vgtb.lit/3/calcpnt.hia')
setting$read('c:/so21503/vgtb.lit/3/calcpnt.hia')
setting <- ConfigParser$new
setting$read('c:/so21503/vgtb.lit/3/calcpnt.hia')
setting <- ConfigParser$new('hia')
setting <- ConfigParser$read('c:/so21503/vgtb.lit/3/calcpnt.hia')
setting <- ConfigParser$new()
View(setting)
setting <- ConfigParser$read('c:/so21503/vgtb.lit/3/calcpnt.hia')
setting$read('c:/so21503/vgtb.lit/3/calcpnt.hia')
View(setting)
setting$data$`long locations`
setting$data$`long locations`['Lippe_RE_R_P_AL2_14_22']
setting$data$`long locations` == 'Lippe_RE_R_P_AL2_14_22'
which(setting$data$`long locations` == 'Lippe_RE_R_P_AL2_14_22')
x <- structure(1, class = letters)
bar <- function(x) UseMethod("bar", x)
bar.z <- function(x) "z"
bar(x)
x <- structure(1, class = letters)
bar <- function(x) UseMethod("bar", x)
bar.z <- function(x) "z"
bar(x)
y <- structure(2, class = letters)
bar(y)
bar.x <- function(x) "x"
bar(y)
xx <- rnorm(1000)
class(xx)
plot(xx)
yy <- ecdf(xx)
plot(yy)
plot
plot.ecdf
methods("plot")
getS3method("plot", "histogram")
im <- list(height = 2.54 * 12 * 6/100, weight = 180/2.2,
name = "James")
jim <- list(height = 2.54 * 12 * 6/100, weight = 180/2.2,
name = "James")
class(jim)
class(jim) <- "person"
class(jim)
print(jim)
print.person <- function(x, ...) {
cat("name:", x$name, "\n")
cat("height:", x$height, "meters", "\n")
cat("weight:", x$weight, "kilograms", "\n")
}
print(jim)
jim <- list(height = 2.54 * 12 * 6/100, weight = 180/2.2,
name = "James")
class(jim) <- "person"
class(jim)
print(jim)
print.person <- function(x, ...) {
cat("name:", x$name, "\n")
cat("height:", x$height, "meters", "\n")
cat("weight:", x$weight, "kilograms", "\n")
}
print(jim)
print.person
class(jim) <- "person"
class(jim)
print(jim)
jim <- list(height = 2.54 * 12 * 6/100, weight = 180/2.2,
name = "James")
class(jim) <- "person1"
class(jim)
print(jim)
print.person1 <- function(x, ...) {
cat("name:", x$name, "\n")
cat("height:", x$height, "meters", "\n")
cat("weight:", x$weight, "kilograms", "\n")
}
print(jim)
install.packages(c("animation", "backports", "bookdown", "broom", "callr", "classInt", "codetools", "commonmark", "dplyr", "FNN", "ggpubr", "haven", "httpuv", "httr", "IRdisplay", "jsonlite", "knitr", "lme4", "mapview", "markdown", "mgcv", "openssl", "packrat", "pillar", "processx", "ps", "quantreg", "RcppEigen", "readr", "readxl", "repr", "rio", "rmarkdown", "rpostgis", "sf", "spData", "survival", "units"))
.loc2col <- function(loc, param, n_param){
colnr <- param + n_param*(loc - 1)
return(colnr)
}
tmp = list(1,2,3)
sapply(tmp, .loc2col, 1, 2)
devtools::load_all(".")
# test
his.file <- "c:/so21503/vgtb.lit/3/qlat.his"
.his_from_locs(his.file, tmp, 1)
devtools::load_all(".")
.his_from_locs(his.file, tmp, 1)
system.time(tmp2 <- .his_from_locs(his.file, tmp, 1))
View(tmp2)
# test
his.file <- "c:/so21503/vgtb.lit/3/calcpnt.his"
loc <- seq.int(1, 3000, 1)
system.time(locdf1 <- .his_df(his.file))
system.time(locdf2 <- .his_from_locs(his.file, loc, 1))
View(locdf[10, 1:110])
View(locdf2[1:10, 1:110])
View(locdf2[1:10, 1:11])
if (!'1' %in% colnames(tmp2)) print('no')
colnames(tmp2)
tmp3 <- his_location(his.file)
View(tmp3)
if (!'1' %in% colnames(tmp3)) print('no')
if (!'long.id' %in% colnames(tmp3)) print('no')
devtools::load_all(".")
tmp3 <- his_location(his.file)
is.numeric('2')
is.numeric(2)
devtools::load_all(".")
locdf <- his_location(his.file)
system.time(locdf2 <- his_from_list(his.file, locdf$sobek.id, 1))
locdf <- his_location(his.file)
system.time(locdf2 <- his_from_list(his.file, locdf$sobek.id, 1))
devtools::load_all(".")
loc1 <- his_location(his.file)
View(loc1)
system.time(locdf2 <- his_from_list(his.file, loc1$sobek.id, 1))
devtools::load_all(".")
system.time(locdf2 <- his_from_list(his.file, loc1$sobek.id, 1))
devtools::load_all(".")
system.time(locdf2 <- his_from_list(his.file, loc1$sobek.id, 1))
warnings()
View(locdf2[1:10,1:5])
dim(locdf2)
# test
his.file <- "c:/so21503/vgtb.lit/3/calcpnt.his"
loc1 <- his_location(his.file)
loc <- seq.int(1, 3000, 1)
system.time(locdf1 <- .his_df(his.file))
system.time(locdf2 <- .his_from_locs(his.file, loc, 1))
dim(locdf2)
system.time(locdf3 <- his_from_list(his.file, loc1$sobek.id, 1))
warnings()
locs1 <- sapply(loc1$sobek.id, .id2loc, loc1)
warnings()
1[[1]]
devtools::load_all(".")
system.time(locdf3 <- his_from_list(his.file, loc1$sobek.id, 1))
as.integer(NA_integer_)
devtools::load_all(".")
system.time(locdf3 <- his_from_list(his.file, loc1$sobek.id, 1))
# checking with NA
locs2 <- loc1$sobek.id[1:5]
locs1 <- c('NA', locs1)
locs2 <- c('NA', locs2)
locs2df <- his_from_list(his.file, locs2, 1)
View(locs2df)
tmp <- locdf1[, c(1, NA, 2, 3)]
View(tmp)
devtools::load_all(".")
loc1 <- his_location(his.file)
system.time(locdf3 <- his_from_list(his.file, loc1$sobek.id, 1))
View(locdf3[1:10, 1:10])
# test
his.file <- "c:/so21503/vgtb.lit/3/calcpnt.his"
locs2 <- c('NA', '2', 'Na2', 'Na3', '3')
locs2df <- his_from_list(his.file, locs2, 1)
View(locs2df)
locs2 <- c('NA', '2', 'Na2', 'Na 3', '3')
locs2df <- his_from_list(his.file, locs2, 1)
range(5)
range(1,5)
as.integer(5.5)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
locs2df <- his_from_list(his.file, locs2, 5)
# test
his.file <- "c:/so21503/vgtb.lit/3/calcpnt.his"
locs2df <- his_from_list(his.file, locs2, 5)
locs2 <- c('NA', '2', 'Na2', 'Na 3', '3')
locs2df <- his_from_list(his.file, locs2, 5)
locs2df <- his_from_list(his.file, locs2, 'water level')
locs2df <- his_from_list(his.file, locs2, 'waterlevel')
View(locs2df)
par = .his_parameter(his.file)
View(par)
.id2param('water level', par)
tmp <- .id2param('water level', par)
tmp_ck <- grep('water level', tolower(par$param_short), fixed = TRUE)
length(tmp_ck)
devtools::load_all(".")
locs2df <- his_from_list(his.file, locs2, 'water level')
devtools::load_all(".")
locs2df <- his_from_list(his.file, locs2, 'water level')
locs2df <- his_from_list(his.file, locs2, 'water2 level')
View(locs2df)
devtools::load_all(".")
locs2df <- his_from_list(his.file, locs2, 'water2 level')
locs2df <- his_from_list(his.file, locs2, 'water level')
print(par)
devtools::load_all(".")
locs2df <- his_from_list(his.file, locs2, 'water level')
library(sobekio)
cases = c('Default 3', 'Default 4')
soprj = 'c:/so21503/vgtb.lit'
hloc <- sobek_case_info(case.name = cases[1], soprj, his.type = 'node', info = 'location')
cases = c('Default 3', 'Default 4')
soprj = 'c:/so21503/vgtb.lit'
hloc <- sobek_case_info(case.name = cases[1], soprj, his.type = 'node', info = 'location')
his.file <- get_file_path('Default 3', soprj, type = 'node')
system.time(tmp <- his_from_case(caces, soprj, wID = hloc$sobek.id,
param = 'waterlevel')[[1]]
)
cases = c('Default 3', 'Default 4')
system.time(tmp <- his_from_case(cases, soprj, wID = hloc$sobek.id,
param = 'waterlevel')[[1]]
)
system.time(tmp <- his_from_case(cases, soprj, wID = hloc$sobek.id[1:10],
param = 'waterlevel')[[1]]
)
View(tmp)
devtools::load_all(".")
system.time(tmp <- his_from_case(cases, soprj, wID = hloc$sobek.id[1:10],
param = 'waterlevel')[[1]]
)
devtools::load_all(".")
system.time(tmp <- his_from_case(cases, soprj, wID = hloc$sobek.id[1:10],
param = 'waterlevel')[[1]]
)
View(tmp)
library(sobekio)
setClass('HisFile',
representation = representation(
path = 'character',
hia = 'character',
nPar = 'integer',
nLoc = 'integer',
title = 'character')
)
hisF <- new('HisFile',
path = 'c:/so21503/vgtb.lit/3/calcpnt.his')
setGeneric('getLocation',
function(object,...) standardGeneric('getLocation')
)
setMethod('getLocation',
'HisFile',
function(object){
rel <- sobekio::his_location(object@path)
return(rel)
})
tmp <- getLocation(hisF)
class(hisF)
hisF
isGeneric(getLocation)
isGeneric('getLocation')
setClass('HisFile',
representation = representation(
path = 'character',
hia = 'character',
nPar = 'integer',
nLoc = 'integer',
title = 'character',
locs = 'data.table')
)
setMethod('getLocation',
'HisFile',
function(obj){
obj@locs <- sobekio::his_location(obj@path)
# return(rel)
})
setGeneric('getLocation',
function(object,...) standardGeneric('getLocation')
)
setMethod('getLocation',
'HisFile',
function(obj){
obj@locs <- sobekio::his_location(obj@path)
# return(rel)
})
hisF <- new('HisFile',
path = 'c:/so21503/vgtb.lit/3/calcpnt.his')
setGeneric('getLocation',
function(object,...) standardGeneric('getLocation')
)
setMethod('getLocation',
'HisFile',
function(obj){
obj@locs <- sobekio::his_location(obj@path)
# return(rel)
})
dir.exists('.')
tmp <- list()
length(tmp)
devtools::load_all(".")
library(sobekio)
data("mtcars")
mtcars[, 1]
mtcars$mpg
library(sobekio)
library(sobekio)
library(sobekio)
library(sobekio)
