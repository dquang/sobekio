sobek.path = "d:/so21302")
library(sobekio)
parsen_msg <- parsen_msg[V1 %like% "%Error%",]
devtools::load_all("~/sobekio")
sobek_sim(case.name = 'MainMod_HW2003_vg1727_t3',
sobek.project = "d:/so21302/main2015.lit",
sobek.path = "d:/so21302")
library(sobekio)
sobek_sim(case.name = 'MainMod_HW2003_vg1727_t3',
sobek.project = "d:/so21302/main2015.lit",
sobek.path = "d:/so21302")
setwd("~/sobekio")
library(sobekio)
sobek_sim(case.name = 'MainMod_HW2003_vg1727_t2',
sobek.project = "d:/so21302/main2015.lit",
sobek.path = "d:/so21302")
library(sobekio)
sobek_sim(case.name = 'MainMod_HW2003_vg1727',
sobek.project = "Z:\M\M2\work\duong\So21302\main2015.lit",
sobek.path = "d:/so21302",
overwrite = F)
sobek_sim(case.name = 'MainMod_HW2003_vg1727',
sobek.project = "Z:/M/M2/work/duong/So21302/main2015.lit",
sobek.path = "d:/so21302",
overwrite = F)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs_bereinigt_bound_geesth',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
library(sobekio)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
setwd("~/sobekio")
setwd("~/sobekio")
library(sobekio)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
sobek_sim(case.name = 'HW13_VH_2018_TR_neue_IDs',
sobek.project = "D:\\2018_neu.lit",
sobek.path = "d:/so21503",
overwrite = F)
library(sobekio)
tmp <- c("dafadf", "sdfsdfsdf")
is.vector(tmp)
is.vector("sdfsdf")
is.list("sdfsdf")
is.list(tmp)
unlist(tmp)
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
list_data
unlist(list_data)
library(data.table)
tmp <- "Z:\\M\\M2\\work\\duong\\NHWSP-Rhein\\Simulation_Ergebnisse\\rhein_ergebnisse\\vg_koeln\\nach_laufen\\20180907\\qIDs.txt"
fread(tmp)
fread(file = c(tmp))
fread(file = list(tmp))
tmp <- list("Z:\\M\\M2\\work\\duong\\NHWSP-Rhein\\Simulation_Ergebnisse\\rhein_ergebnisse\\vg_koeln\\nach_laufen\\20180907\\qIDs.txt")
tmp
length(tmp)
is.vector(tmp)
file.exists(tmp)
is.character("1232")
tmp
clist <- list(
'4_Main_2013_neue_LAT_fixP13_HW2013',
'4_Main_2013_neue_LAT_fixP13_hist_HW2011',
'4_Main_2013_neue_LAT_fixP13_hist_HW2003',
'4_Main_2013_neue_LAT_fixP13_hist_HW1999',
'4_Main_2013_neue_LAT_fixP13_hist_HW1995',
'4_Main_2013_neue_LAT_fixP13_hist_HW1988',
'4_Main_2013_neue_LAT_fixP13_HW1988_korr',
'4_Main_2013_neue_LAT_fixP13_HW1995_korr',
'4_Main_2013_neue_LAT_fixP13_HW1995_korr_2')
clist <- unlist(clist)
clist
clist <- list(
'4_Main_2013_neue_LAT_fixP13_HW2013',
'4_Main_2013_neue_LAT_fixP13_hist_HW2011',
'4_Main_2013_neue_LAT_fixP13_hist_HW2003',
'4_Main_2013_neue_LAT_fixP13_hist_HW1999',
'4_Main_2013_neue_LAT_fixP13_hist_HW1995',
'4_Main_2013_neue_LAT_fixP13_hist_HW1988',
'4_Main_2013_neue_LAT_fixP13_HW1988_korr',
'4_Main_2013_neue_LAT_fixP13_HW1995_korr',
'4_Main_2013_neue_LAT_fixP13_HW1995_korr_2')
tmp <- as.data.frame(clist)
tmp
View(tmp)
clist <- unlist(clist)
tmp <- as.data.frame((matrix(clist,
tmp <- as.data.frame(matrix(clist,
nrow = length(case.list),
ncol = 1))
tmp <- as.data.frame(matrix(clist,
nrow = length(clist),
ncol = 1))
View(tmp)
tmp <- data.table(matrix(clist,
nrow = length(clist),
ncol = 1))
View(tmp)
is.data.frame(tmp)
tmp <- data.table(tmp)
library(sobekio)
library(sobekio)
sobek_sim(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
library(sobekio)
sobek_sim(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
sobek_sim(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
devtools::load_all(".")
hfile = "d:/so21302/rhein29a.lit/275/calcpnt.his"
hisDF = .his_df(hfile)
View(hisDF)
system.time(hisDF = .his_df(hfile))
system.time("hisDF = .his_df(hfile)")
system.time(hisDF = .his_df(hfile))
system.time(hisDF <- .his_df(hfile))
.his_df2 <- function(his.file, param = 1L) {
# param: index of the parameter
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# get the total bytes of the his file
his_fsize <- file.size(his.file)
# get number of parameters and number of locations
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
seek(con, 168)
# read parameter names
params_str <- readBin(con, what = "character", size = 20*param_nr,
endian = "little")
# each parameter name is stored in a fixed string having length = 20
param_names <- vector(mode = "character", length = param_nr)
# removing padding strings at the end
for (i in 1:param_nr) param_names[i] <- substr(params_str,
start = 20*(i - 1) + 1,
stop = 20*i)
if (is.numeric(param)) param <- as.integer(param)
if (is.integer(param)){
if (param > param_nr) stop("param cannot bigger than total parameters")
work_param <- param
} else{
if (!is.character(param)) stop("param must be given as the index (integer)",
" or as name (characters)")
work_param <- grep(tolower(param), tolower(param_names), fixed = TRUE)
if (length(work_param) == 0) stop("Parameter: ", param, " not found")
if (length(work_param) > 1) stop("Parameter: ", param, " is ambiguous")
}
# get the number of time steps
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
# searching the start time (t0) and time step (dt) in his_title
t0_pattern <- "[0-9]{4}.[0-9]{2}.[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}"
dt_pattern <- "scu=[[:space:]]{1,}([0-9]{1,})s"
his_t0 <- regmatches(his_title, regexpr(t0_pattern, his_title))
his_t0 <- as.POSIXct(his_t0, format = "%Y.%m.%d %H:%M:%S", tz = "GMT")
his_dt <- as.integer(gsub(
dt_pattern,
"\\1",
regmatches(
his_title,
gregexpr(dt_pattern, his_title)
)[[1]]
))
his_lines <- matrix(nrow = total_tstep, ncol = param_nr * total_loc)
his_time <- matrix(
nrow = total_tstep, ncol = 1,
dimnames = list(list(), "ts")
)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
# this reading can be done with chunk = max 1000.
for (i in 1:total_tstep) {
# seek(con, where = 4, origin = "current")
his_lines[i, ] <- readBin(con, what = "double", size = 4,
n = param_nr * total_loc,
endian = "little"
)
}
close(con)
# creating a mask for the matrix, to get only columns for the param
# print(paste("Param given: ", param, "Param index: ", work_param))
his_mask <- seq.int(
from = work_param + 1,
to = param_nr * total_loc + 1,
by = param_nr
)
his_lines <- his_lines[, his_mask]
return(his_lines)
}
system.time(hisDF2 <- .his_df2(hfile))
system.time(hisDF <- .his_df(hfile))
hisDF[1,1]
hisDF2[1,1]
hisDF2[100,100]
hisDF[100,100]
tmp1 <- hisDF[, 1:10]
tmp2 <- hisDF2[, 1:10]
View(tmp1)
View(tmp2)
tmp1 <- hisDF[, 100]
tmp2 <- hisDF2[, 100]
tmp1 - tmp2
library(testthat)
devtools::use_testthat()
library(testthat)
library(sobekio)
test_check("sobekio")
expect_equal(tmp1, tmp2)
expect_equal(hisDF, hisDF2)
.his_df2 <- function(his.file, param = 1L) {
# param: index of the parameter
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# get the total bytes of the his file
his_fsize <- file.size(his.file)
# get number of parameters and number of locations
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
seek(con, 168)
# read parameter names
params_str <- readBin(con, what = "character", size = 20*param_nr,
endian = "little")
# each parameter name is stored in a fixed string having length = 20
param_names <- vector(mode = "character", length = param_nr)
# removing padding strings at the end
for (i in 1:param_nr) param_names[i] <- substr(params_str,
start = 20*(i - 1) + 1,
stop = 20*i)
if (is.numeric(param)) param <- as.integer(param)
if (is.integer(param)){
if (param > param_nr) stop("param cannot bigger than total parameters")
work_param <- param
} else{
if (!is.character(param)) stop("param must be given as the index (integer)",
" or as name (characters)")
work_param <- grep(tolower(param), tolower(param_names), fixed = TRUE)
if (length(work_param) == 0) stop("Parameter: ", param, " not found")
if (length(work_param) > 1) stop("Parameter: ", param, " is ambiguous")
}
# get the number of time steps
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
# searching the start time (t0) and time step (dt) in his_title
t0_pattern <- "[0-9]{4}.[0-9]{2}.[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}"
dt_pattern <- "scu=[[:space:]]{1,}([0-9]{1,})s"
his_t0 <- regmatches(his_title, regexpr(t0_pattern, his_title))
his_t0 <- as.POSIXct(his_t0, format = "%Y.%m.%d %H:%M:%S", tz = "GMT")
his_dt <- as.integer(gsub(
dt_pattern,
"\\1",
regmatches(
his_title,
gregexpr(dt_pattern, his_title)
)[[1]]
))
his_lines <- matrix(nrow = total_tstep, ncol = param_nr * total_loc)
his_time <- matrix(
nrow = total_tstep, ncol = 1,
dimnames = list(list(), "ts")
)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
# this reading can be done with chunk = max 1000.
for (i in 1:total_tstep) {
# seek(con, where = 4, origin = "current")
his_lines[i, ] <- readBin(con, what = "double", size = 4,
n = param_nr * total_loc + 1,
endian = "little"
)
}
close(con)
# creating a mask for the matrix, to get only columns for the param
# print(paste("Param given: ", param, "Param index: ", work_param))
his_mask <- seq.int(
from = work_param + 1,
to = param_nr * total_loc + 1,
by = param_nr
)
his_lines <- his_lines[, his_mask]
return(his_lines)
}
system.time(hisDF <- .his_df(hfile))
system.time(hisDF2 <- .his_df2(hfile))
.his_df2 <- function(his.file, param = 1L) {
# param: index of the parameter
if (!file.exists(his.file)) {
stop(paste("HIS file:", his.file, "does not exit!"))
}
con <- file(his.file, open = "rb", encoding = "native.enc")
# check .HIS file simple way
his_title <- readBin(con, "character", size = 160, endian = "little")
if (length(his_title) == 0) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
if (!grepl("SOBEK[[:space:]]{1,}", his_title)) {
close(con)
stop(paste("HIS file:", his.file, "has wrong format"))
}
# get the total bytes of the his file
his_fsize <- file.size(his.file)
# get number of parameters and number of locations
seek(con, 160)
param_nr <- readBin(con, "int", size = 4, endian = "little")
total_loc <- readBin(con, "int", size = 4, endian = "little")
seek(con, 168)
# read parameter names
params_str <- readBin(con, what = "character", size = 20*param_nr,
endian = "little")
# each parameter name is stored in a fixed string having length = 20
param_names <- vector(mode = "character", length = param_nr)
# removing padding strings at the end
for (i in 1:param_nr) param_names[i] <- substr(params_str,
start = 20*(i - 1) + 1,
stop = 20*i)
if (is.numeric(param)) param <- as.integer(param)
if (is.integer(param)){
if (param > param_nr) stop("param cannot bigger than total parameters")
work_param <- param
} else{
if (!is.character(param)) stop("param must be given as the index (integer)",
" or as name (characters)")
work_param <- grep(tolower(param), tolower(param_names), fixed = TRUE)
if (length(work_param) == 0) stop("Parameter: ", param, " not found")
if (length(work_param) > 1) stop("Parameter: ", param, " is ambiguous")
}
# get the number of time steps
data_bytes <- file.size(his.file) -
(160 + # for the .HIS information ("title")
2 * 4 + # for total parameters & total locations
20 * param_nr + # for the paramter names
total_loc * (4 + 20)) # location table
# int(4) for time, double(4) for data
total_tstep <- data_bytes / (4 + 4 * param_nr * total_loc)
# searching the start time (t0) and time step (dt) in his_title
t0_pattern <- "[0-9]{4}.[0-9]{2}.[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}"
dt_pattern <- "scu=[[:space:]]{1,}([0-9]{1,})s"
his_t0 <- regmatches(his_title, regexpr(t0_pattern, his_title))
his_t0 <- as.POSIXct(his_t0, format = "%Y.%m.%d %H:%M:%S", tz = "GMT")
his_dt <- as.integer(gsub(
dt_pattern,
"\\1",
regmatches(
his_title,
gregexpr(dt_pattern, his_title)
)[[1]]
))
his_lines <- matrix(nrow = total_tstep, ncol = param_nr * total_loc + 1)
his_time <- matrix(
nrow = total_tstep, ncol = 1,
dimnames = list(list(), "ts")
)
seek(con, where = 168 + 20 * param_nr + 24 * total_loc)
# this reading can be done with chunk = max 1000.
for (i in 1:total_tstep) {
# seek(con, where = 4, origin = "current")
his_lines[i, ] <- readBin(con, what = "double", size = 4,
n = param_nr * total_loc + 1,
endian = "little"
)
}
close(con)
# creating a mask for the matrix, to get only columns for the param
# print(paste("Param given: ", param, "Param index: ", work_param))
his_mask <- seq.int(
from = work_param + 1,
to = param_nr * total_loc + 1,
by = param_nr
)
his_lines <- his_lines[, his_mask]
return(his_lines)
}
system.time(hisDF2 <- .his_df2(hfile))
system.time(hisDF <- .his_df(hfile))
system.time(hisDF2 <- .his_df2(hfile))
expect_equal(hisDF, hisDF2)
tmp1 <- hisDF[, 100]
tmp2 <- hisDF2[, 100]
.his_df2(hfile, param = "waterlevel")
.his_df2(hfile, param = "water level")
dim(hisDF2)
locDF <- his_location(hfile)
View(locDF)
locNR <- lapply(locDF$sobek.id[1:300], .id2loc, his.locs = locDF)
View(locNR)
tmp3 <- hisDF[, locNR]
tmp3 <- hisDF[, unlist(locNR)]
dim(tmp3)
library(data.table)
dfout <- data.table(tmp3)
colnames(dfout) <- locDF$sobek.id[1:300]
dfout[, 1:2]
hisDF[, NA]
hisDF[, c(1, 2, 3, -1)]
devtools::load_all(".")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so23102/rhein29a.lit",
sobek.path = "d:/so21302")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
getwd()
devtools::load_all("~/sobekio")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
pwd()
getwd()
pwd
setwd("d:/so21302/21122018_123626")
sbkfnm <- fread("sbkedit.fnm", sep = "\n", header = F, quote = F)
sbkfnm <- fread("cmtwork/sbkedit.fnm", sep = "\n", header = F, quote = F)
sbkfnm <- fread("cmtwork/sbkedit.fnm", sep = "\n", header = F, quote = "")
View(sbkfnm)
sbkfnm[V1 %like% 'const=']
cpath <- "\\SO21302\\RHEIN29A.LIT\\282"
print(cpath)
cpath <- "\SO21302\RHEIN29A.LIT\282"
cpath <- "\\SO21302\\RHEIN29A.LIT\\282"
sbkfnm[V1 %like% cpath]
cpath <- "\\\SO21302\\\RHEIN29A.LIT\\\282"
cpath <- "\\\\SO21302\\\\RHEIN29A.LIT\\\\282"
sbkfnm[V1 %like% cpath]
devtools::load_all("~/sobekio")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
devtools::load_all(".")
devtools::load_all(".")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
devtools::load_all("~/sobekio")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
install.packages('configr')
sobek_sim(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
cos(0)
cos(90)
cos(Pi)
PI
pi
cos(pi)
cos(2*pi)
cos(pi/2)
setwd("d:/Users/Duong/Documents/sobekio")
sobek_view(case.name = 'Bezug18_Maßn_Bret_Spon_Gunter_QP_REC_Orsoy_Wor_Lohr_Test',
sobek.project = "d:/so21302/rhein29a.lit",
sobek.path = "d:/so21302")
